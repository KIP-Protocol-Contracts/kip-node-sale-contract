'solc --version' running
'solc @openzeppelin=.deps/npm/@openzeppelin ./contracts/KIPNode.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes --allow-paths .,/home/trmaphi/source/kip-node-sale-contract/contracts' running
INFO:Detectors:
Math.mulDiv(uint256,uint256,uint256) (.deps/npm/@openzeppelin/contracts/utils/math/Math.sol#123-202) has bitwise-xor operator ^ instead of the exponentiation operator **: 
         - inverse = (3 * denominator) ^ 2 (.deps/npm/@openzeppelin/contracts/utils/math/Math.sol#184)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-exponentiation
INFO:Detectors:
Math.mulDiv(uint256,uint256,uint256) (.deps/npm/@openzeppelin/contracts/utils/math/Math.sol#123-202) performs a multiplication on the result of a division:
        - denominator = denominator / twos (.deps/npm/@openzeppelin/contracts/utils/math/Math.sol#169)
        - inverse = (3 * denominator) ^ 2 (.deps/npm/@openzeppelin/contracts/utils/math/Math.sol#184)
Math.mulDiv(uint256,uint256,uint256) (.deps/npm/@openzeppelin/contracts/utils/math/Math.sol#123-202) performs a multiplication on the result of a division:
        - denominator = denominator / twos (.deps/npm/@openzeppelin/contracts/utils/math/Math.sol#169)
        - inverse *= 2 - denominator * inverse (.deps/npm/@openzeppelin/contracts/utils/math/Math.sol#188)
Math.mulDiv(uint256,uint256,uint256) (.deps/npm/@openzeppelin/contracts/utils/math/Math.sol#123-202) performs a multiplication on the result of a division:
        - denominator = denominator / twos (.deps/npm/@openzeppelin/contracts/utils/math/Math.sol#169)
        - inverse *= 2 - denominator * inverse (.deps/npm/@openzeppelin/contracts/utils/math/Math.sol#189)
Math.mulDiv(uint256,uint256,uint256) (.deps/npm/@openzeppelin/contracts/utils/math/Math.sol#123-202) performs a multiplication on the result of a division:
        - denominator = denominator / twos (.deps/npm/@openzeppelin/contracts/utils/math/Math.sol#169)
        - inverse *= 2 - denominator * inverse (.deps/npm/@openzeppelin/contracts/utils/math/Math.sol#190)
Math.mulDiv(uint256,uint256,uint256) (.deps/npm/@openzeppelin/contracts/utils/math/Math.sol#123-202) performs a multiplication on the result of a division:
        - denominator = denominator / twos (.deps/npm/@openzeppelin/contracts/utils/math/Math.sol#169)
        - inverse *= 2 - denominator * inverse (.deps/npm/@openzeppelin/contracts/utils/math/Math.sol#191)
Math.mulDiv(uint256,uint256,uint256) (.deps/npm/@openzeppelin/contracts/utils/math/Math.sol#123-202) performs a multiplication on the result of a division:
        - denominator = denominator / twos (.deps/npm/@openzeppelin/contracts/utils/math/Math.sol#169)
        - inverse *= 2 - denominator * inverse (.deps/npm/@openzeppelin/contracts/utils/math/Math.sol#192)
Math.mulDiv(uint256,uint256,uint256) (.deps/npm/@openzeppelin/contracts/utils/math/Math.sol#123-202) performs a multiplication on the result of a division:
        - denominator = denominator / twos (.deps/npm/@openzeppelin/contracts/utils/math/Math.sol#169)
        - inverse *= 2 - denominator * inverse (.deps/npm/@openzeppelin/contracts/utils/math/Math.sol#193)
Math.mulDiv(uint256,uint256,uint256) (.deps/npm/@openzeppelin/contracts/utils/math/Math.sol#123-202) performs a multiplication on the result of a division:
        - prod0 = prod0 / twos (.deps/npm/@openzeppelin/contracts/utils/math/Math.sol#172)
        - result = prod0 * inverse (.deps/npm/@openzeppelin/contracts/utils/math/Math.sol#199)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply
INFO:Detectors:
Reentrancy in KIPNode.public_mint(uint8,address,uint8,uint8,string) (contracts/KIPNode.sol#91-122):
        External calls:
        - fsuccess = USDT_Token.transferFrom(_msgSender(),address(this),_price) (contracts/KIPNode.sol#105)
        - fsuccess = USDC_Token.transferFrom(_msgSender(),address(this),_price) (contracts/KIPNode.sol#110)
        - _safeMint(to,_nextTokenId) (contracts/KIPNode.sol#117)
                - retval = IERC721Receiver(to).onERC721Received(_msgSender(),from,tokenId,data) (.deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol#467-480)
        State variables written after the call(s):
        - _nextTokenId ++ (contracts/KIPNode.sol#116)
        KIPNode._nextTokenId (contracts/KIPNode.sol#11) can be used in cross function reentrancies:
        - KIPNode.public_mint(uint8,address,uint8,uint8,string) (contracts/KIPNode.sol#91-122)
        - KIPNode.whitelist_mint(uint8,address,uint8,uint256,bytes32[]) (contracts/KIPNode.sol#124-144)
        - tier_minted_amounts_public[tier] += _amount (contracts/KIPNode.sol#120)
        KIPNode.tier_minted_amounts_public (contracts/KIPNode.sol#43) can be used in cross function reentrancies:
        - KIPNode.public_mint(uint8,address,uint8,uint8,string) (contracts/KIPNode.sol#91-122)
        - KIPNode.tier_minted_amounts_public (contracts/KIPNode.sol#43)
        - user_minted_amounts_public[tier][_msgSender()] += _amount (contracts/KIPNode.sol#121)
        KIPNode.user_minted_amounts_public (contracts/KIPNode.sol#41) can be used in cross function reentrancies:
        - KIPNode.public_mint(uint8,address,uint8,uint8,string) (contracts/KIPNode.sol#91-122)
        - KIPNode.user_minted_amounts_public (contracts/KIPNode.sol#41)
Reentrancy in KIPNode.whitelist_mint(uint8,address,uint8,uint256,bytes32[]) (contracts/KIPNode.sol#124-144):
        External calls:
        - _safeMint(to,_nextTokenId) (contracts/KIPNode.sol#138)
                - retval = IERC721Receiver(to).onERC721Received(_msgSender(),from,tokenId,data) (.deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol#467-480)
        State variables written after the call(s):
        - _nextTokenId ++ (contracts/KIPNode.sol#137)
        KIPNode._nextTokenId (contracts/KIPNode.sol#11) can be used in cross function reentrancies:
        - KIPNode.public_mint(uint8,address,uint8,uint8,string) (contracts/KIPNode.sol#91-122)
        - KIPNode.whitelist_mint(uint8,address,uint8,uint256,bytes32[]) (contracts/KIPNode.sol#124-144)
        - tier_minted_amounts_whitelist[tier] += _amount (contracts/KIPNode.sol#142)
        KIPNode.tier_minted_amounts_whitelist (contracts/KIPNode.sol#44) can be used in cross function reentrancies:
        - KIPNode.tier_minted_amounts_whitelist (contracts/KIPNode.sol#44)
        - KIPNode.whitelist_mint(uint8,address,uint8,uint256,bytes32[]) (contracts/KIPNode.sol#124-144)
        - user_minted_amounts_whitelist[tier][_msgSender()] += _amount (contracts/KIPNode.sol#143)
        KIPNode.user_minted_amounts_whitelist (contracts/KIPNode.sol#40) can be used in cross function reentrancies:
        - KIPNode.user_minted_amounts_whitelist (contracts/KIPNode.sol#40)
        - KIPNode.whitelist_mint(uint8,address,uint8,uint256,bytes32[]) (contracts/KIPNode.sol#124-144)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1
INFO:Detectors:
KIPNode.setMaxTierAmount(uint16) (contracts/KIPNode.sol#177-179) should emit an event for: 
        - MaxTierAmount = new_address (contracts/KIPNode.sol#178) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-arithmetic
INFO:Detectors:
KIPNode.constructor(address,address,address).usdt_token (contracts/KIPNode.sol#64) lacks a zero-check on :
                - USDT_TokenAddress = usdt_token (contracts/KIPNode.sol#69)
KIPNode.constructor(address,address,address).usdc_token (contracts/KIPNode.sol#64) lacks a zero-check on :
                - USDC_TokenAddress = usdc_token (contracts/KIPNode.sol#72)
KIPNode.setKIPFundAddress(address).new_address (contracts/KIPNode.sol#181) lacks a zero-check on :
                - KIPFundAddress = new_address (contracts/KIPNode.sol#182)
KIPNode.setUsdtToken(address).newtoken (contracts/KIPNode.sol#185) lacks a zero-check on :
                - USDT_TokenAddress = newtoken (contracts/KIPNode.sol#186)
KIPNode.setUsdcToken(address).newtoken (contracts/KIPNode.sol#190) lacks a zero-check on :
                - USDC_TokenAddress = newtoken (contracts/KIPNode.sol#191)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation
INFO:Detectors:
ERC721._checkOnERC721Received(address,address,uint256,bytes) (.deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol#465-482) has external calls inside a loop: retval = IERC721Receiver(to).onERC721Received(_msgSender(),from,tokenId,data) (.deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol#467-480)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop
INFO:Detectors:
Reentrancy in KIPNode.public_mint(uint8,address,uint8,uint8,string) (contracts/KIPNode.sol#91-122):
        External calls:
        - fsuccess = USDT_Token.transferFrom(_msgSender(),address(this),_price) (contracts/KIPNode.sol#105)
        - fsuccess = USDC_Token.transferFrom(_msgSender(),address(this),_price) (contracts/KIPNode.sol#110)
        - _safeMint(to,_nextTokenId) (contracts/KIPNode.sol#117)
                - retval = IERC721Receiver(to).onERC721Received(_msgSender(),from,tokenId,data) (.deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol#467-480)
        Event emitted after the call(s):
        - Approval(owner,to,tokenId) (.deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol#419)
                - _safeMint(to,_nextTokenId) (contracts/KIPNode.sol#117)
        - TokenMinted(_msgSender(),false,tier,tier_price_per_token[tier],to,_nextTokenId,_code) (contracts/KIPNode.sol#118)
        - Transfer(from,to,tokenId) (.deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol#267)
                - _safeMint(to,_nextTokenId) (contracts/KIPNode.sol#117)
Reentrancy in KIPNode.whitelist_mint(uint8,address,uint8,uint256,bytes32[]) (contracts/KIPNode.sol#124-144):
        External calls:
        - _safeMint(to,_nextTokenId) (contracts/KIPNode.sol#138)
                - retval = IERC721Receiver(to).onERC721Received(_msgSender(),from,tokenId,data) (.deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol#467-480)
        Event emitted after the call(s):
        - TokenMinted(_msgSender(),true,tier,0,to,_nextTokenId,) (contracts/KIPNode.sol#139)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3
INFO:Detectors:
KIPNode.public_mint(uint8,address,uint8,uint8,string) (contracts/KIPNode.sol#91-122) uses timestamp for comparisons
        Dangerous comparisons:
        - require(bool,string)(tier_start_timestamp_public[tier] <= block.timestamp,start_timestamp not allowed) (contracts/KIPNode.sol#96)
        - require(bool,string)(block.timestamp <= tier_end_timestamp_public[tier],end_timestamp not allowed) (contracts/KIPNode.sol#97)
KIPNode.whitelist_mint(uint8,address,uint8,uint256,bytes32[]) (contracts/KIPNode.sol#124-144) uses timestamp for comparisons
        Dangerous comparisons:
        - require(bool,string)(tier_start_timestamp_whitelist[tier] <= block.timestamp,start_timestamp not allowed) (contracts/KIPNode.sol#130)
        - require(bool,string)(block.timestamp <= tier_end_timestamp_whitelist[tier],end_timestamp not allowed) (contracts/KIPNode.sol#131)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp
INFO:Detectors:
ERC721._checkOnERC721Received(address,address,uint256,bytes) (.deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol#465-482) uses assembly
        - INLINE ASM (.deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol#476-478)
Strings.toString(uint256) (.deps/npm/@openzeppelin/contracts/utils/Strings.sol#24-44) uses assembly
        - INLINE ASM (.deps/npm/@openzeppelin/contracts/utils/Strings.sol#30-32)
        - INLINE ASM (.deps/npm/@openzeppelin/contracts/utils/Strings.sol#36-38)
MerkleProof._efficientHash(bytes32,bytes32) (.deps/npm/@openzeppelin/contracts/utils/cryptography/MerkleProof.sol#224-231) uses assembly
        - INLINE ASM (.deps/npm/@openzeppelin/contracts/utils/cryptography/MerkleProof.sol#226-230)
Math.mulDiv(uint256,uint256,uint256) (.deps/npm/@openzeppelin/contracts/utils/math/Math.sol#123-202) uses assembly
        - INLINE ASM (.deps/npm/@openzeppelin/contracts/utils/math/Math.sol#130-133)
        - INLINE ASM (.deps/npm/@openzeppelin/contracts/utils/math/Math.sol#154-161)
        - INLINE ASM (.deps/npm/@openzeppelin/contracts/utils/math/Math.sol#167-176)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage
INFO:Detectors:
KIPNode.public_mint(uint8,address,uint8,uint8,string) (contracts/KIPNode.sol#91-122) has costly operations inside a loop:
        - _nextTokenId ++ (contracts/KIPNode.sol#116)
KIPNode.whitelist_mint(uint8,address,uint8,uint256,bytes32[]) (contracts/KIPNode.sol#124-144) has costly operations inside a loop:
        - _nextTokenId ++ (contracts/KIPNode.sol#137)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#costly-operations-inside-a-loop
INFO:Detectors:
Context._contextSuffixLength() (.deps/npm/@openzeppelin/contracts/utils/Context.sol#25-27) is never used and should be removed
Context._msgData() (.deps/npm/@openzeppelin/contracts/utils/Context.sol#21-23) is never used and should be removed
ERC721._baseURI() (.deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol#100-102) is never used and should be removed
ERC721._burn(uint256) (.deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol#328-333) is never used and should be removed
ERC721._increaseBalance(address,uint128) (.deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol#224-228) is never used and should be removed
ERC721._safeTransfer(address,address,uint256) (.deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol#377-379) is never used and should be removed
ERC721._safeTransfer(address,address,uint256,bytes) (.deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol#385-388) is never used and should be removed
ERC721._transfer(address,address,uint256) (.deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol#346-356) is never used and should be removed
Math.average(uint256,uint256) (.deps/npm/@openzeppelin/contracts/utils/math/Math.sol#96-99) is never used and should be removed
Math.ceilDiv(uint256,uint256) (.deps/npm/@openzeppelin/contracts/utils/math/Math.sol#107-115) is never used and should be removed
Math.log10(uint256,Math.Rounding) (.deps/npm/@openzeppelin/contracts/utils/math/Math.sol#359-364) is never used and should be removed
Math.log2(uint256) (.deps/npm/@openzeppelin/contracts/utils/math/Math.sol#268-304) is never used and should be removed
Math.log2(uint256,Math.Rounding) (.deps/npm/@openzeppelin/contracts/utils/math/Math.sol#310-315) is never used and should be removed
Math.log256(uint256) (.deps/npm/@openzeppelin/contracts/utils/math/Math.sol#372-396) is never used and should be removed
Math.log256(uint256,Math.Rounding) (.deps/npm/@openzeppelin/contracts/utils/math/Math.sol#402-407) is never used and should be removed
Math.max(uint256,uint256) (.deps/npm/@openzeppelin/contracts/utils/math/Math.sol#81-83) is never used and should be removed
Math.min(uint256,uint256) (.deps/npm/@openzeppelin/contracts/utils/math/Math.sol#88-90) is never used and should be removed
Math.mulDiv(uint256,uint256,uint256) (.deps/npm/@openzeppelin/contracts/utils/math/Math.sol#123-202) is never used and should be removed
Math.mulDiv(uint256,uint256,uint256,Math.Rounding) (.deps/npm/@openzeppelin/contracts/utils/math/Math.sol#207-213) is never used and should be removed
Math.sqrt(uint256) (.deps/npm/@openzeppelin/contracts/utils/math/Math.sol#221-252) is never used and should be removed
Math.sqrt(uint256,Math.Rounding) (.deps/npm/@openzeppelin/contracts/utils/math/Math.sol#257-262) is never used and should be removed
Math.tryAdd(uint256,uint256) (.deps/npm/@openzeppelin/contracts/utils/math/Math.sol#25-31) is never used and should be removed
Math.tryDiv(uint256,uint256) (.deps/npm/@openzeppelin/contracts/utils/math/Math.sol#61-66) is never used and should be removed
Math.tryMod(uint256,uint256) (.deps/npm/@openzeppelin/contracts/utils/math/Math.sol#71-76) is never used and should be removed
Math.tryMul(uint256,uint256) (.deps/npm/@openzeppelin/contracts/utils/math/Math.sol#46-56) is never used and should be removed
Math.trySub(uint256,uint256) (.deps/npm/@openzeppelin/contracts/utils/math/Math.sol#36-41) is never used and should be removed
Math.unsignedRoundsUp(Math.Rounding) (.deps/npm/@openzeppelin/contracts/utils/math/Math.sol#412-414) is never used and should be removed
MerkleProof.multiProofVerify(bytes32[],bool[],bytes32,bytes32[]) (.deps/npm/@openzeppelin/contracts/utils/cryptography/MerkleProof.sol#74-81) is never used and should be removed
MerkleProof.multiProofVerifyCalldata(bytes32[],bool[],bytes32,bytes32[]) (.deps/npm/@openzeppelin/contracts/utils/cryptography/MerkleProof.sol#88-95) is never used and should be removed
MerkleProof.processMultiProof(bytes32[],bool[],bytes32[]) (.deps/npm/@openzeppelin/contracts/utils/cryptography/MerkleProof.sol#107-156) is never used and should be removed
MerkleProof.processMultiProofCalldata(bytes32[],bool[],bytes32[]) (.deps/npm/@openzeppelin/contracts/utils/cryptography/MerkleProof.sol#163-212) is never used and should be removed
MerkleProof.processProofCalldata(bytes32[],bytes32) (.deps/npm/@openzeppelin/contracts/utils/cryptography/MerkleProof.sol#60-66) is never used and should be removed
MerkleProof.verifyCalldata(bytes32[],bytes32,bytes32) (.deps/npm/@openzeppelin/contracts/utils/cryptography/MerkleProof.sol#39-41) is never used and should be removed
SignedMath.abs(int256) (.deps/npm/@openzeppelin/contracts/utils/math/SignedMath.sol#37-42) is never used and should be removed
SignedMath.average(int256,int256) (.deps/npm/@openzeppelin/contracts/utils/math/SignedMath.sol#28-32) is never used and should be removed
SignedMath.max(int256,int256) (.deps/npm/@openzeppelin/contracts/utils/math/SignedMath.sol#13-15) is never used and should be removed
SignedMath.min(int256,int256) (.deps/npm/@openzeppelin/contracts/utils/math/SignedMath.sol#20-22) is never used and should be removed
Strings.equal(string,string) (.deps/npm/@openzeppelin/contracts/utils/Strings.sol#91-93) is never used and should be removed
Strings.toHexString(address) (.deps/npm/@openzeppelin/contracts/utils/Strings.sol#84-86) is never used and should be removed
Strings.toHexString(uint256) (.deps/npm/@openzeppelin/contracts/utils/Strings.sol#56-60) is never used and should be removed
Strings.toHexString(uint256,uint256) (.deps/npm/@openzeppelin/contracts/utils/Strings.sol#65-78) is never used and should be removed
Strings.toStringSigned(int256) (.deps/npm/@openzeppelin/contracts/utils/Strings.sol#49-51) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code
INFO:Detectors:
Version constraint ^0.8.20 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
        - VerbatimInvalidDeduplication
        - FullInlinerNonExpressionSplitArgumentEvaluationOrder
        - MissingSideEffectsOnSelectorAccess.
 It is used by:
        - .deps/npm/@openzeppelin/contracts/access/Ownable.sol#4
        - .deps/npm/@openzeppelin/contracts/interfaces/draft-IERC6093.sol#3
        - .deps/npm/@openzeppelin/contracts/token/ERC20/IERC20.sol#4
        - .deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol#4
        - .deps/npm/@openzeppelin/contracts/token/ERC721/IERC721.sol#4
        - .deps/npm/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol#4
        - .deps/npm/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol#4
        - .deps/npm/@openzeppelin/contracts/utils/Context.sol#4
        - .deps/npm/@openzeppelin/contracts/utils/Strings.sol#4
        - .deps/npm/@openzeppelin/contracts/utils/cryptography/MerkleProof.sol#4
        - .deps/npm/@openzeppelin/contracts/utils/introspection/ERC165.sol#4
        - .deps/npm/@openzeppelin/contracts/utils/introspection/IERC165.sol#4
        - .deps/npm/@openzeppelin/contracts/utils/math/Math.sol#4
        - .deps/npm/@openzeppelin/contracts/utils/math/SignedMath.sol#4
        - contracts/KIPNode.sol#3
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Function KIPNode.public_mint(uint8,address,uint8,uint8,string) (contracts/KIPNode.sol#91-122) is not in mixedCase
Parameter KIPNode.public_mint(uint8,address,uint8,uint8,string)._amount (contracts/KIPNode.sol#91) is not in mixedCase
Parameter KIPNode.public_mint(uint8,address,uint8,uint8,string).payment_token (contracts/KIPNode.sol#91) is not in mixedCase
Parameter KIPNode.public_mint(uint8,address,uint8,uint8,string)._code (contracts/KIPNode.sol#91) is not in mixedCase
Function KIPNode.whitelist_mint(uint8,address,uint8,uint256,bytes32[]) (contracts/KIPNode.sol#124-144) is not in mixedCase
Parameter KIPNode.whitelist_mint(uint8,address,uint8,uint256,bytes32[])._amount (contracts/KIPNode.sol#124) is not in mixedCase
Parameter KIPNode.whitelist_mint(uint8,address,uint8,uint256,bytes32[])._maxAmount (contracts/KIPNode.sol#125) is not in mixedCase
Parameter KIPNode.whitelist_mint(uint8,address,uint8,uint256,bytes32[])._merkleProof (contracts/KIPNode.sol#125) is not in mixedCase
Parameter KIPNode.setMerkleRoot(uint8,bytes32)._merkleRoot (contracts/KIPNode.sol#146) is not in mixedCase
Parameter KIPNode.setDurationPublic(uint8,uint64,uint64)._start (contracts/KIPNode.sol#150) is not in mixedCase
Parameter KIPNode.setDurationPublic(uint8,uint64,uint64)._end (contracts/KIPNode.sol#150) is not in mixedCase
Parameter KIPNode.setDurationWhitelist(uint8,uint64,uint64)._start (contracts/KIPNode.sol#155) is not in mixedCase
Parameter KIPNode.setDurationWhitelist(uint8,uint64,uint64)._end (contracts/KIPNode.sol#155) is not in mixedCase
Parameter KIPNode.setTokenPrice(uint8,uint256)._price (contracts/KIPNode.sol#160) is not in mixedCase
Parameter KIPNode.setUserCap(uint8,uint16)._cap_public (contracts/KIPNode.sol#164) is not in mixedCase
Parameter KIPNode.setTotalCap(uint8,uint16,uint16)._cap_public (contracts/KIPNode.sol#168) is not in mixedCase
Parameter KIPNode.setTotalCap(uint8,uint16,uint16)._cap_whitelist (contracts/KIPNode.sol#168) is not in mixedCase
Parameter KIPNode.setTransferEnabled(bool)._enabled (contracts/KIPNode.sol#173) is not in mixedCase
Parameter KIPNode.setMaxTierAmount(uint16).new_address (contracts/KIPNode.sol#177) is not in mixedCase
Parameter KIPNode.setKIPFundAddress(address).new_address (contracts/KIPNode.sol#181) is not in mixedCase
Parameter KIPNode.setOperator(address,bool)._address (contracts/KIPNode.sol#195) is not in mixedCase
Function KIPNode.check_whitelist_mint(uint8,address,uint256,bytes32[]) (contracts/KIPNode.sol#200-205) is not in mixedCase
Parameter KIPNode.check_whitelist_mint(uint8,address,uint256,bytes32[])._maxAmount (contracts/KIPNode.sol#201) is not in mixedCase
Parameter KIPNode.check_whitelist_mint(uint8,address,uint256,bytes32[])._merkleProof (contracts/KIPNode.sol#201) is not in mixedCase
Variable KIPNode.USDT_Token (contracts/KIPNode.sol#13) is not in mixedCase
Variable KIPNode.USDT_TokenAddress (contracts/KIPNode.sol#14) is not in mixedCase
Variable KIPNode.USDC_Token (contracts/KIPNode.sol#16) is not in mixedCase
Variable KIPNode.USDC_TokenAddress (contracts/KIPNode.sol#17) is not in mixedCase
Variable KIPNode.KIPFundAddress (contracts/KIPNode.sol#19) is not in mixedCase
Variable KIPNode.TransferEnabled (contracts/KIPNode.sol#21) is not in mixedCase
Variable KIPNode.MaxTierAmount (contracts/KIPNode.sol#22) is not in mixedCase
Variable KIPNode.tier_price_per_token (contracts/KIPNode.sol#26) is not in mixedCase
Variable KIPNode.tier_start_timestamp_public (contracts/KIPNode.sol#28) is not in mixedCase
Variable KIPNode.tier_end_timestamp_public (contracts/KIPNode.sol#29) is not in mixedCase
Variable KIPNode.tier_start_timestamp_whitelist (contracts/KIPNode.sol#31) is not in mixedCase
Variable KIPNode.tier_end_timestamp_whitelist (contracts/KIPNode.sol#32) is not in mixedCase
Variable KIPNode.tier_total_cap_public (contracts/KIPNode.sol#34) is not in mixedCase
Variable KIPNode.tier_user_cap_public (contracts/KIPNode.sol#35) is not in mixedCase
Variable KIPNode.tier_total_cap_whitelist (contracts/KIPNode.sol#37) is not in mixedCase
Variable KIPNode.tier_whitelist_merkle_root (contracts/KIPNode.sol#38) is not in mixedCase
Variable KIPNode.user_minted_amounts_whitelist (contracts/KIPNode.sol#40) is not in mixedCase
Variable KIPNode.user_minted_amounts_public (contracts/KIPNode.sol#41) is not in mixedCase
Variable KIPNode.tier_minted_amounts_public (contracts/KIPNode.sol#43) is not in mixedCase
Variable KIPNode.tier_minted_amounts_whitelist (contracts/KIPNode.sol#44) is not in mixedCase
Variable KIPNode.kip_operator (contracts/KIPNode.sol#46) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions
INFO:Detectors:
Variable KIPNode.USDC_TokenAddress (contracts/KIPNode.sol#17) is too similar to KIPNode.USDT_TokenAddress (contracts/KIPNode.sol#14)
Variable KIPNode.tier_minted_amounts_public (contracts/KIPNode.sol#43) is too similar to KIPNode.user_minted_amounts_public (contracts/KIPNode.sol#41)
Variable KIPNode.tier_minted_amounts_whitelist (contracts/KIPNode.sol#44) is too similar to KIPNode.user_minted_amounts_whitelist (contracts/KIPNode.sol#40)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#variable-names-too-similar
INFO:Slither:./contracts/ analyzed (17 contracts with 95 detectors), 119 result(s) found